{"version":3,"sources":["Helpers/StoreProvider.ts","Helpers/UseStore.ts","Helpers/UseEnter.ts","Components/TodoItem.tsx","Components/TodoNew.tsx","Components/TodoList.tsx","App.tsx","serviceWorker.ts","Stores/TodoItem.ts","Stores/TodoList.ts","index.tsx"],"names":["StoreContext","createContext","StoreProvider","Provider","useStore","useContext","onEnterPress","cb","e","key","TodoItem","todo","todoList","useState","newText","setText","isEditing","setEdit","inputRef","createRef","saveText","updateTodo","text","useObserver","List","Item","Content","floated","Button","icon","toggle","onClick","isDone","active","removeTodo","Input","fluid","ref","Icon","name","link","current","focus","iconPosition","readOnly","onKeyDown","onChange","target","value","TodoNew","newTodo","setTodo","addTodo","trim","style","marginRight","placeholder","TodoList","divided","verticalAlign","list","map","ID","App","className","Header","as","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","this","observable","action","shallow","todos","config","client","listID","user","forEach","Client","parsed","queryString","parse","search","id","toString","listen","entity","loadList","linkArray","startFromAddress","address","followKey","readKey","query","stringify","a","modelFind","found","entitiesList","obj","getStoreLink","modelSave","index","findIndex","item","splice","modelCreate","created","unshift","pop","modelDelete","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","deviceId","API","token","start","api","threadsConfig","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8e3088a.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nimport { TodoList } from \"../Stores/TodoList\";\r\n\r\nexport const StoreContext = createContext<TodoList>({} as TodoList);\r\nexport const StoreProvider = StoreContext.Provider;\r\n","import { useContext } from \"react\";\r\nimport { StoreContext } from \"./StoreProvider\";\r\nimport { TodoList } from \"../Stores/TodoList\";\r\n\r\nexport const useStore = (): TodoList => useContext(StoreContext);\r\n","import { KeyboardEvent } from \"react\";\r\n\r\nexport const onEnterPress = (cb: any) => {\r\n  return (e: KeyboardEvent) => {\r\n    if (e.key === \"Enter\") {\r\n      cb();\r\n    }\r\n  };\r\n};\r\n","import React, { useState, createRef } from \"react\";\r\nimport { Button, List, Input, Icon } from \"semantic-ui-react\";\r\nimport { useObserver } from \"mobx-react-lite\";\r\nimport TodoItemClass from \"../Stores/TodoItem\";\r\nimport { useStore } from \"../Helpers/UseStore\";\r\nimport { onEnterPress } from \"../Helpers/UseEnter\";\r\n\r\ninterface Props {\r\n    todo: TodoItemClass;\r\n}\r\n\r\nexport const TodoItem = ({ todo }: Props) => {\r\n    const todoList = useStore();\r\n    const [newText, setText] = useState('');\r\n    const [isEditing, setEdit] = useState(false);\r\n    const inputRef = createRef<Input>();\r\n\r\n    const saveText = () => {\r\n        todoList.updateTodo({ ...todo, text: newText });\r\n        setEdit(false);\r\n        setText('');\r\n    };\r\n\r\n    return useObserver(() => (\r\n      <List.Item>\r\n        <List.Content floated=\"right\">\r\n          <Button\r\n            icon=\"check\"\r\n            toggle\r\n            onClick={() => todoList.updateTodo({ ...todo, isDone: !todo.isDone}) }\r\n            active={todo.isDone}\r\n          />\r\n          <Button icon=\"close\" onClick={() => todoList.removeTodo(todo)} />\r\n        </List.Content>\r\n        <List.Content>\r\n          <Input\r\n            fluid\r\n            ref={inputRef}\r\n            icon={\r\n              isEditing ? (\r\n                <Icon name=\"save\" link onClick={saveText} />\r\n              ) : (\r\n                <Icon\r\n                  name=\"pencil\"\r\n                  link\r\n                  onClick={() => {\r\n                      setEdit(true)\r\n                      inputRef.current?.focus()\r\n                  }}\r\n                />\r\n              )\r\n            }\r\n            iconPosition=\"left\"\r\n            readOnly={!isEditing}\r\n            onKeyDown={onEnterPress(saveText)}\r\n            onChange={e => setText(e.target.value)}\r\n            value={isEditing ? newText || todo.text : todo.text}\r\n          />\r\n        </List.Content>\r\n      </List.Item>\r\n    ));\r\n};","import React, { useState } from \"react\";\r\nimport { Button, List, Input } from \"semantic-ui-react\";\r\nimport TodoItemClass from \"../Stores/TodoItem\";\r\nimport { useStore } from \"../Helpers/UseStore\";\r\nimport { onEnterPress } from \"../Helpers/UseEnter\";\r\n\r\ninterface Props {\r\n  todo: TodoItemClass;\r\n}\r\n\r\nexport const TodoNew = () => {\r\n  const [newTodo, setTodo] = useState(\"\");\r\n  const todoList = useStore();\r\n\r\n  const addTodo = () => {\r\n    if (newTodo.trim() === \"\") return\r\n    todoList.addTodo(newTodo);\r\n    setTodo(\"\");\r\n  };\r\n\r\n  return (\r\n    <List.Item>\r\n      <List.Content floated=\"right\">\r\n        <Button icon=\"plus\" onClick={addTodo} style={{ marginRight: \"3.2em\" }} />\r\n      </List.Content>\r\n      <List.Content>\r\n        <Input\r\n          fluid\r\n          placeholder=\"Enter todo item...\"\r\n          value={newTodo}\r\n          onKeyDown={onEnterPress(addTodo)}\r\n          onChange={e => setTodo(e.target.value)}\r\n        />\r\n      </List.Content>\r\n    </List.Item>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useStore } from \"../Helpers/UseStore\";\r\nimport { TodoItem } from \"./TodoItem\";\r\nimport { TodoNew } from \"./TodoNew\";\r\nimport { useObserver } from \"mobx-react-lite\";\r\nimport { List } from \"semantic-ui-react\";\r\n\r\nexport const TodoList = () => {\r\n    const todoList = useStore();\r\n\r\n    return useObserver(() => (\r\n      <List divided verticalAlign=\"middle\">\r\n        <TodoNew />\r\n        {todoList.list.map(todo => (\r\n          <TodoItem key={todo.ID} todo={todo} />\r\n        ))}\r\n      </List>\r\n    ));\r\n};","import React from 'react';\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\nimport './App.css';\r\nimport { TodoList } from \"./Components/TodoList\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header as=\"h2\">\r\n        <Icon name=\"check\" />\r\n        <Header.Content>Todo App</Header.Content>\r\n      </Header>\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport default function register() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString(),\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === \"installed\") {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log(\"New content is available; please refresh.\");\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log(\"Content is cached for offline use.\");\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import { action, observable } from \"mobx\";\r\n\r\nexport interface TodoType {\r\n  text: string;\r\n  ID: string;\r\n  isDone: boolean;\r\n}\r\n\r\nexport default class TodoItem {\r\n  ID: string\r\n\r\n  @observable text: string = \"\";\r\n  @observable isDone: boolean = false;\r\n\r\n  constructor(todo: TodoType) {\r\n    this.text = todo.text;\r\n    this.ID = todo.ID\r\n    this.isDone = todo.isDone\r\n  }\r\n\r\n  @action\r\n  update = (todo: TodoType) => {\r\n    this.text = todo.text\r\n    this.isDone = todo.isDone\r\n  }\r\n}\r\n","import { action, observable } from \"mobx\";\r\nimport { Client, Config, BaseConfig } from \"@textile/threads-client\";\r\nimport queryString from \"query-string\";\r\nimport TodoItem, { TodoType } from \"./TodoItem\";\r\n\r\nexport class TodoList {\r\n  private client: Client;\r\n  private listID: string = \"\";\r\n  user: string = '';\r\n\r\n  @observable.shallow list: TodoItem[] = [];\r\n\r\n  constructor(todos: string[], config: Config | BaseConfig) {\r\n\r\n\r\n\r\n\r\n    console.log(config, 'config')\r\n    todos.forEach(this.addTodo);\r\n    this.client = new Client(config);\r\n    const parsed = queryString.parse(window.location.search);\r\n    if (parsed.id) {\r\n      this.listID = parsed.id.toString();\r\n\r\n\r\n      this.client.listen(this.listID, \"Todo\", 'any', (entity: any, error: any) => {\r\n        console.log(error);\r\n        console.log(entity, 'entity');\r\n        entity && this.loadList();\r\n      })\r\n\r\n      this.loadList();\r\n      return\r\n    }\r\n\r\n    let id = '6daba587-2abe-4586-b570-1a5850a16f12'\r\n\r\n    let linkArray = [\r\n      {\r\n        \"address\": \"/ip4/127.0.0.1/tcp/4006/p2p/12D3KooWFSqRCUdV6J8De5PzspT8vwQcZNYvkNZ2P14Hzk8792p1/thread/bafk6blr7go7q7pa2fgvmhdosystt5l4c3o4vpkexnz7s6frzqtbrdbi\",\r\n        \"followKey\": \"AqJXmAigYaKgiAFR6kNufHMyVU57ADovHSZgUkwF71ejw274pSf1vGKsAibf\",\r\n        \"readKey\": \"2BNiE45Q1os81TMzhNBDhJquscjug93MnMSq3X2gyGkPytc6vahuaSPTsZZm5\"\r\n      },\r\n      {\r\n        \"address\": \"/ip4/172.31.0.2/tcp/4006/p2p/12D3KooWFSqRCUdV6J8De5PzspT8vwQcZNYvkNZ2P14Hzk8792p1/thread/bafk6blr7go7q7pa2fgvmhdosystt5l4c3o4vpkexnz7s6frzqtbrdbi\",\r\n        \"followKey\": \"AqJXmAigYaKgiAFR6kNufHMyVU57ADovHSZgUkwF71ejw274pSf1vGKsAibf\",\r\n        \"readKey\": \"2BNiE45Q1os81TMzhNBDhJquscjug93MnMSq3X2gyGkPytc6vahuaSPTsZZm5\"\r\n      },\r\n      {\r\n        \"address\": \"/ip4/104.210.43.77/tcp/4006/p2p/12D3KooWFSqRCUdV6J8De5PzspT8vwQcZNYvkNZ2P14Hzk8792p1/thread/bafk6blr7go7q7pa2fgvmhdosystt5l4c3o4vpkexnz7s6frzqtbrdbi\",\r\n        \"followKey\": \"AqJXmAigYaKgiAFR6kNufHMyVU57ADovHSZgUkwF71ejw274pSf1vGKsAibf\",\r\n        \"readKey\": \"2BNiE45Q1os81TMzhNBDhJquscjug93MnMSq3X2gyGkPytc6vahuaSPTsZZm5\"\r\n      },\r\n      {\r\n        \"address\": \"/ip4/104.210.43.77/tcp/10733/p2p/12D3KooWFSqRCUdV6J8De5PzspT8vwQcZNYvkNZ2P14Hzk8792p1/thread/bafk6blr7go7q7pa2fgvmhdosystt5l4c3o4vpkexnz7s6frzqtbrdbi\",\r\n        \"followKey\": \"AqJXmAigYaKgiAFR6kNufHMyVU57ADovHSZgUkwF71ejw274pSf1vGKsAibf\",\r\n        \"readKey\": \"2BNiE45Q1os81TMzhNBDhJquscjug93MnMSq3X2gyGkPytc6vahuaSPTsZZm5\"\r\n      },\r\n      {\r\n        \"address\": \"/ip4/10.255.0.2/tcp/10733/p2p/12D3KooWFSqRCUdV6J8De5PzspT8vwQcZNYvkNZ2P14Hzk8792p1/thread/bafk6blr7go7q7pa2fgvmhdosystt5l4c3o4vpkexnz7s6frzqtbrdbi\",\r\n        \"followKey\": \"AqJXmAigYaKgiAFR6kNufHMyVU57ADovHSZgUkwF71ejw274pSf1vGKsAibf\",\r\n        \"readKey\": \"2BNiE45Q1os81TMzhNBDhJquscjug93MnMSq3X2gyGkPytc6vahuaSPTsZZm5\"\r\n      }\r\n    ];\r\n\r\n\r\n\r\n\r\n    this.client.startFromAddress(id, linkArray[0].address, linkArray[0].followKey, linkArray[0].readKey).then(() => {\r\n      this.listID = id;\r\n      const query = { ...parsed, id: id };\r\n      console.log(query, 'query')\r\n\r\n      //    this.client.listen(store.id, \"Todo\"  )\r\n\r\n      window.location.search = queryString.stringify(query);\r\n    });\r\n\r\n\r\n  };\r\n\r\n  @action\r\n  loadList = async () => {\r\n\r\n    //const created = await this.client.modelCreate(this.listID, 'Todo', [{ ID: \"\", text: \"ssup\", isDone: false }])\r\n\r\n    const parsed = queryString.parse(window.location.search);\r\n    let user: string = parsed?.user?.toString() || '';\r\n    const found = await this.client.modelFind(this.listID, 'Todo', {});\r\n    console.log(this.listID, 'Todo', {}, found, user)\r\n\r\n    this.list = found.entitiesList.map((entity: any) => entity).map((obj: any) => {\r\n      console.log(obj)\r\n      return new TodoItem(obj);\r\n    });\r\n\r\n    let link = await this.client.getStoreLink(this.listID);\r\n    console.log('link', link)\r\n  };\r\n\r\n  @action\r\n  updateTodo = async (todo: TodoItem) => {\r\n    await this.client.modelSave(this.listID, \"Todo\", [todo])\r\n    const index = this.list.findIndex(item => item.ID === todo.ID);\r\n    this.list.splice(index, 1, todo);\r\n  }\r\n\r\n  @action\r\n  addTodo = async (text: string) => {\r\n    const todo: TodoType = { ID: \"\", text, isDone: false };\r\n    const created = await this.client.modelCreate(this.listID, 'Todo', [todo])\r\n    const todos = created.entitiesList\r\n    this.list.unshift(new TodoItem(todos.pop()));\r\n  };\r\n\r\n  @action\r\n  removeTodo = async (todo: TodoItem) => {\r\n    await this.client.modelDelete(this.listID, \"Todo\", [todo.ID]);\r\n    const index = this.list.findIndex(item => item.ID === todo.ID);\r\n    this.list.splice(index, 1);\r\n  };\r\n}\r\n\r\nconst schema = {\r\n  $id: \"https://example.com/person.schema.json\",\r\n  $schema: \"http://json-schema.org/draft-07/schema#\",\r\n  title: \"Todo\",\r\n  type: \"object\",\r\n  properties: {\r\n    ID: {\r\n      type: \"string\",\r\n      description: \"The item id.\"\r\n    },\r\n    text: {\r\n      type: \"string\",\r\n      description: \"The todo text.\"\r\n    },\r\n    idDone: {\r\n      description: \"Whether the item is done.\",\r\n      type: \"boolean\"\r\n    }\r\n  }\r\n};\r\n","// https://levelup.gitconnected.com/react-hooks-mobx-todolist-c138eb4f3d04\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./serviceWorker\";\r\nimport { StoreProvider } from \"./Helpers/StoreProvider\";\r\nimport { TodoList } from \"./Stores/TodoList\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport API from \"@textile/textile\";\r\nimport uuid from \"uuid\";\r\nimport queryString from \"query-string\";\r\n\r\nregisterServiceWorker();\r\n\r\nlet deviceId = '5GEm36BDFXkKNx9LbW9eX6zAFuwUVJbb9P5UnXaFg2XaoQ7i'\r\nconst parsed = queryString.parse(window.location.search);\r\nif (!parsed.user) {\r\n  const query = { user: deviceId };\r\n  window.location.search = queryString.stringify(query);\r\n} else {\r\n    deviceId = parsed.user.toString();\r\n}\r\n\r\nnew API({\r\n  // Hard-coded for demo purposes\r\n  token: \"38fc999c-d621-4411-8263-49752bb6f340\",\r\n  deviceId\r\n})\r\n  .start()\r\n  .then(api => {\r\n    const todoList = new TodoList([], api.threadsConfig);\r\n\r\n    //@ts-ignore - for debugging\r\n    window.todoList = todoList;\r\n\r\n    ReactDOM.render(\r\n      <StoreProvider value={todoList}>\r\n        <App />\r\n      </StoreProvider>,\r\n      document.getElementById(\"root\")\r\n    );\r\n  });\r\n"],"sourceRoot":""}